/* File: Client.java
 * Date				Author				Changes
 * Aug 27 16		Chris Rabe			added some java documentation
 * Aug 27 16		Chris Rabe			implemented some command methods
 * Oct 12 16		Chris Rabe			implemented save and load methods
 */

package generator.backend;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * This class reacts to user inputs and responds to them accordingly. It calls
 * methods from the Generator and ensures that all the preconditions of the
 * generator methods are met first. It also handles any exceptions thrown by the
 * generator.
 * 
 * @author Chris Rabe
 */
public class Controller {

	/**
	 * Symbolises the version of the program
	 */
	public static final double VERSION = 0.2;

	private Generator generator;

	public Controller() {
		this.generator = new Generator();
	}

	/**
	 * This method is passed a two segment string which must contain the code
	 * and description. The first segment must be the code which needs to be
	 * edited and the second segment must be the description which needs to be
	 * stored within the code.
	 * 
	 * @param input
	 *            - two segment string containing code and description
	 */
	public void editCode(String[] input) {
		try {
			if (input.length != 2) {
				throw new InputException("Invalid code -- must have two args.");
			}
			generator.editCode(input[0], input[1]);
		} catch (InputException e) {
			handleException(e);
		}
	}

	/**
	 * This method takes in a string which contains two string values separated
	 * by a space. The first argument (n) symbolises the number of codes which
	 * the user wants to generate. The second argument (c) symbolises the length
	 * of the codes generated.
	 * 
	 * @param input
	 *            - two segment input containing n and c parameters
	 */
	public void generate(String[] input) {
		try {
			if (input.length != 2) {
				throw new InputException("Invalid input -- must have two args.");
			}
			int n = Integer.valueOf(input[0]);
			int c = Integer.valueOf(input[1]);
			generator.generate(n, c);
		} catch (InputException e) {
			handleException(e);
		}
	}

	/**
	 * Reduces the size of the codes generated.
	 * 
	 * @param input
	 */
	public void reduce(String input) {
		try {
			int value = Integer.valueOf(input);
			generator.reduceCodeSize(value);
		} catch (Exception e) {
			handleException(new InputException(e.getMessage()));
		}
	}

	/**
	 * Displays information about the code.
	 * 
	 * @param code
	 */
	public Code show(String code) {
		try {
			return generator.getCode(code);
		} catch (InputException e) {
			handleException(e);
			return null;
		}
	}

	/**
	 * Retrieves a specific list based on the string type. Valid
	 * 
	 * @param type
	 * @return
	 */
	public List<? extends Object> getList(String type) {
		switch (type) {
		case "CODE":
			return generator.getCodes();
		case "DESC":
			return generator.getDescriptions();
		default:
			System.out.println("Invalid argument.");
			return null;
		}
	}

	/**
	 * Adds a description which needs to be mapped into the descriptions list.
	 * 
	 * @param description
	 */
	public void addDescription(String description) {
		try {
			generator.addDescription(description);
		} catch (InputException e) {
			handleException(e);
		}
	}

	/**
	 * Removes the description inside the generator's description list
	 * 
	 * @param description
	 */
	public void delDescription(String description) {
		try {
			generator.removeDescription(description);
		} catch (InputException e) {
			handleException(e);
		}
	}

	/**
	 * Distributes the added descriptions to the code generated by the user.
	 */
	public void distribute() {
		try {
			generator.distributeDesc();
		} catch (InputException e) {
			handleException(e);
		}
	}

	/**
	 * Saves all the codes into a file with the specified filename. The file
	 * must be in the same directory as the program.
	 * 
	 * @param filename
	 */
	public void save(String filename) {
		String fname = determineFile(filename);
		File file = new File(fname);
		try {
			file.createNewFile();
			generator.save(file);
		} catch (IOException | InputException e) {
			handleException(new InputException(e.getMessage()));
		}
	}

	/**
	 * Reads the contents of the file and stores it inside the generator. The
	 * file must be in the same directory as the program.
	 * 
	 * @param filename
	 */
	public void load(String filename) {
		try {
			if (!filename.contains(".txt")) {
				throw new InputException("Must be a .txt file");
			}
			File file = new File(filename);
			generator.load(file);
		} catch (InputException e) {
			handleException(e);
		}
	}

	// Helper methods

	/**
	 * Extracts any strange extensions which the user may have placed into the
	 * string.
	 * 
	 * @param filename
	 * @return
	 */
	private String determineFile(String filename) {
		String[] tmp = filename.split("[.]");
		return String.format("%s.txt", tmp[0]);
	}

	/**
	 * This is where all exceptions should be handled. Need to be changed if GUI
	 * is implemented!!!
	 * 
	 * @param e
	 */
	private void handleException(InputException e) {
		System.out.println(e.getMessage());
	}

}
